\documentclass{article}
\usepackage{float, hyperref}
\usepackage[margin=1in]{geometry}
\usepackage{graphicx}
\usepackage{hyperref}
\usepackage{caption}
\usepackage{pgffor}

\begin{document}

<<options, echo=FALSE>>=
nClusters = 15
library(knitr)
opts_chunk$set(concordance=TRUE)
@

<<echo=FALSE,eval=TRUE>>=
library(rtracklayer)
library(Rsamtools)
library(grid)
library(GenomicAlignments)
library(ggplot2)
library(GGally)
library(edgeR)
library(stringr)
library(EDASeq)
library(dplyr)
library(matrixStats)
library(gridExtra)
library(reshape2)
library(scales)

plotName = "L120"
outDir = "Clustering_L120"
dir.create(paste(getwd(),"/",outDir,sep=""))
@

%\author{Lindsay Rutter}
\title{Cluster Analysis of Soybean Leaves 120}

\maketitle

<<echo=FALSE>>=
rm(list=ls())
load("All_leaves040615.rda")
ct <- countTable
ct2 <- assays(ct)[[1]]
rownames(ct2) <- ct@rowData@elementMetadata@listData$ID
colnames(ct2) <- unlist(strsplit(colnames(ct2), "\\."))[seq(1, 17*3, 3)]
leaves.all <- ct2
load("All_roots.rda")
ct.roots <- countTable
ct2 <- assays(ct.roots)[[1]]
rownames(ct2) <- ct@rowData@elementMetadata@listData$ID
colnames(ct2) <- unlist(strsplit(colnames(ct2), "\\."))[seq(1, 18*3, 3)]
roots.all <- ct2
all <- cbind(leaves.all, roots.all[,c(1:15,17:18)])
# (54044, 34)
y <- DGEList(counts=all)
@

<<echo=FALSE>>=
# Now try to threshold count number and normalize on the six samples
#L120 is (56044, 6)
L120 = y[,c("ML08R","ML14R","ML22R","ML11R","ML27R","ML33R")]
colnames(L120)=c("s8","s14","s22","s11","s27","s33")

#L120 is (39120, 6)
# Make sure each gene has at least one count in at least half of the six samples
L120 <- L120[rowSums(L120$counts>1)>=ncol(L120)/2,]
#L120a <- calcNormFactors(L120, method="none") # does nothing
# Not positive and negative
cpm.L120.new <- cpm(L120, TRUE, TRUE)
cpm.L120.norm <- betweenLaneNormalization(cpm.L120.new, which="full", round=FALSE)
L120 = cpm.L120.norm

RowSD = function(x) {
  sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}

L120t = L120
L120 = as.data.frame(L120t)
L120 = mutate(L120, mean = (s8+s14+s22+s11+s27+s33)/6, stdev = RowSD(cbind(s8,s14,s22,s11,s27,s33)))
rownames(L120)=rownames(L120t)
# L120 = (39120, 8)

# The first quartile threshold of mean counts across the 5 samples
q1T = as.numeric(summary(L120$mean)["1st Qu."])
L120q1 = subset(L120,mean>q1T)
# The first quartile threshold of standard deviation across the 5 samples
q1Ts = as.numeric(summary(L120q1$stdev)["1st Qu."])
# L120q1 (22004, 8)
L120q1 = subset(L120q1,stdev>q1Ts)
# filt (17116, 8)
filt = subset(L120,mean<=q1T|stdev<=q1Ts)
ind = seq(1, nrow(L120), by=10)
L120Plot=L120[ind, ]
@

<<echo=FALSE>>=
model = loess(mean ~ stdev, data=L120q1)
# L120q1 (9809, 8)
L120q1 = L120q1[which(sign(model$residuals) == 1),]

L120q1 = L120q1[,1:6]
L120q1s = t(apply(as.matrix(L120q1), 1, scale))
colnames(L120q1s)=c("[1]Fe-","[2]Fe-","[3]Fe-","[1]Fe+","[2]Fe+","[3]Fe+")
colnames(L120q1)=c("[1]Fe-","[2]Fe-","[3]Fe-","[1]Fe+","[2]Fe+","[3]Fe+")
filt = filt[,1:6]
colnames(filt)=c("[1]Fe-","[2]Fe-","[3]Fe-","[1]Fe+","[2]Fe+","[3]Fe+")
# filt (17116, 8)
filt = rbind(filt,L120q1[which(sign(model$residuals) == -1),])
# filt (29311, 6)
filts = t(apply(as.matrix(filt), 1, scale))
colnames(filts)=c("[1]Fe-","[2]Fe-","[3]Fe-","[1]Fe+","[2]Fe+","[3]Fe+")
colnames(filt)=c("[1]Fe-","[2]Fe-","[3]Fe-","[1]Fe+","[2]Fe+","[3]Fe+")
@

<<echo=FALSE>>=
# L120q1s (9809, 6)
dendo = L120q1s
rownames(dendo) = NULL
# Euclidean distance between rows of matrix
d = dist(as.matrix(dendo))
# Hierarchical clustering using ward.D linkage
hc = hclust(d, method="ward.D")
@

\begin{figure}[H]
\centering
<<echo=FALSE>>=
plotName = "L120"
plot(hc,main=paste(plotName, "Dendogram"), xlab=NA, sub=NA)
@
\end{figure}

%%%%%%%%%%%%%%%%%%%% PLOT CLUSTERS %%%%%%%%%%%%%%%%%%%%%

<<echo=FALSE,eval=TRUE,results='asis'>>=
getPCP <- function(nC){

plotName = "L120"
outDir = "Clustering_L120"

set.seed(1)
colList = scales::hue_pal()(nC+1)
#colList = scales::hue_pal()(nClusters)
k = cutree(hc, k=nC)
###########################
plot_clusters = lapply(1:nC, function(i){
  x = as.data.frame(L120q1s[which(k==i),])
  nGenes = nrow(x)
  x$cluster = "color"
  x$cluster2 = factor(x$cluster)
  xNames = rownames(x)
  write.table(xNames, file = paste(getwd(), "/", outDir, "/", plotName, "_", nC, "_", i, ".txt", sep=""), sep=",", row.names=FALSE, col.names=FALSE, quote=FALSE)
  p = ggparcoord(x, columns=1:6, groupColumn=8, scale="globalminmax", alphaLines = 0.2) + xlab(paste("Cluster ", i, " (n=", format(nGenes, big.mark=",", scientific=FALSE), ")",sep="")) + ylab("Count") + theme(legend.position = "none", axis.title=element_text(size=12), axis.text=element_text(size=12)) + scale_colour_manual(values = c("color" = colList[i+1]))
  fileName = paste(getwd(), "/", outDir, "/", plotName, "_", nC, "_", i, ".jpg", sep="")
  jpeg(fileName)
  plot(p)
  invisible(dev.off())
  p
})
###########################
  filts = as.data.frame(filts)
  filts$cluster = "color"
  filts$cluster2 = factor(filts$cluster)
  nGenes = nrow(filts)
  plot_filtered = ggparcoord(filts, columns=1:6, groupColumn=8, scale="globalminmax", alphaLines = 0.01) + xlab(paste("Filtered (n=", format(nGenes, big.mark=",", scientific=FALSE), ")",sep="")) + ylab("Count") + theme(legend.position = "none", axis.title=element_text(size=12), axis.text=element_text(size=12)) + scale_colour_manual(values = c("color" = colList[1]))
###########################
  jpeg(file = paste(getwd(), "/", outDir, "/", plotName, "_", nC, ".jpg", sep=""))
  # We allow up to 4 plots in each column
  p = do.call("grid.arrange", c(append(plot_clusters, list(plot_filtered)), ncol=ceiling(nC/4)))
  invisible(dev.off())
}
@

<<echo=FALSE,eval=TRUE,results='asis'>>=
for (i in 2:15){
  getPCP(i)
}
@

\begin{center}
\foreach \i in {2,3,...,15} {
  \includegraphics[width=0.99\textwidth]{Clustering_L120/L120_\i}
  \captionof{figure}{Parallel coordinate plot of the normalized L120 read counts across \i\ clusters}
}
\end{center}

\end{document}
